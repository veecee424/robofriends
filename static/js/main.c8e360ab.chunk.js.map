{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Error.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundary","state","hasError","this","setState","children","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","catch","e","console","log","filteredRobots","filter","toLowerCase","includes","length","Searchbox","style","overflow","border","height","Error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAceA,G,MAXF,SAACC,GACV,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BH,KAClD,4BAAKF,GACL,2BAAIC,MCUDK,EAfE,SAACP,GACd,IAAQQ,EAAWR,EAAXQ,OACR,OACI,6BAEQA,EAAOC,KAAI,SAACC,GACR,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAMP,GAAIF,KAAI,UAAKS,EAAMT,MAAQC,MAAK,UAAKQ,EAAMR,OAASC,GAAE,UAAKO,EAAMP,WCA3FS,EATG,SAACZ,GACf,IAAQa,EAAiBb,EAAjBa,aACR,OACI,yBAAKT,UAAU,OACX,2BAAOU,SAAUD,EAAcT,UAAU,gCAAgCW,KAAK,SAASC,YAAY,uBCmBhGC,E,kDAtBX,WAAajB,GAAQ,IAAD,8BAChB,cAAMA,IACDkB,MAAQ,CACTC,UAAU,GAHE,E,qDAOpB,WACIC,KAAKC,SAAS,CAACF,UAAU,M,oBAG7B,WACI,OAAIC,KAAKF,MAAMC,SACJ,0DAIPC,KAAKpB,MAAMsB,a,GAlBKC,aCiEbC,G,wDA1DX,aAAgB,IAAD,8BACX,gBAOJC,eAAiB,SAACC,GAId,EAAKL,SAAS,CACVM,YAAaD,EAAME,OAAOC,SAX9B,EAAKX,MAAQ,CACTV,OAAQ,GACRmB,YAAa,IAJN,E,qDAoBf,WAAqB,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKb,SAAS,CAACb,OAAO0B,OACrCC,OAAM,SAAAC,GAAC,OAAGC,QAAQC,IAAI,+B,oBAG3B,WACI,MAAgClB,KAAKF,MAA7BV,EAAR,EAAQA,OAAQmB,EAAhB,EAAgBA,YAIVY,EAAiB/B,EAAOgC,QAAO,SAAA9B,GACjC,OAAOA,EAAMT,KAAKwC,cAAcC,SAASf,EAAYc,kBAMzD,OAAKjC,EAAOmC,OAKR,yBAAKvC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAACwC,EAAD,CAAW/B,aAAcO,KAAKK,iBAC9B,yBAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjE,kBAACC,EAAD,KACI,kBAAC,EAAD,CAAUzC,OAAQ+B,OATvB,+C,GA1CDhB,cCKH2B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c8e360ab.chunk.js","sourcesContent":["import React from 'react'\nimport 'tachyons'\n\nconst Card = (props) => {\n    const { name, email, id } = props;\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='Alien pic' src={`https://robohash.org/${id}`}/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = (props) => {\n    const { robots } = props;\n    return (\n        <div>\n            {\n                robots.map((robot)=> {\n                    return (\n                        <Card key={robot.id} name={`${robot.name}`} email={`${robot.email}`} id={`${robot.id}`}/>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = (props) => {\n    const { searchChange } = props;\n    return (\n        <div className='pa2'>\n            <input onChange={searchChange} className='pa3 b--green bg-lightest-blue' type='search' placeholder='Search for robot' />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>OOps! Something went wrong</h1>\n        }\n\n        return (\n            this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundary;\n\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox'\nimport ErrorBoundary from '../components/Error';\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nclass App extends Component {\n\n    constructor () {\n        super();\n        this.state = {\n            robots: [], // Initialize robots as an empty array so it gets updated by the fetch operation\n            searchfield: '' // Initialize searchfield as an empty string so it gets updated by the search input.\n        }\n    }\n\n    onSearchChange = (event) => {\n        /**\n         * Pick the value of input and set searchfield to its value\n         */\n        this.setState({\n            searchfield: event.target.value\n        })\n    }\n\n    /**\n     * If component was mounted (inserted into the render tree) successfully, fetch users\n     */\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => {this.setState({robots:users})})\n        .catch(e=> console.log('Unable to fetch robots'))\n    }\n\n    render () {\n        const { robots, searchfield } = this.state;\n        /**\n         * Filter robots\n         */\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n\n        /**\n         * Render a loading h1 tag while the robots are being fetched\n         */\n        if (!robots.length) {\n            return <h1>Loading....</h1>\n        }\n        \n        return (\n            <div className='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <Searchbox searchChange={this.onSearchChange}/>\n                <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/containers/App'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}