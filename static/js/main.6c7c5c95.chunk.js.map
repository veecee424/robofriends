{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Error.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundary","state","hasError","this","setState","children","Component","Scroll","style","overflow","border","height","connect","searchField","dispatch","onSearchChange","event","payload","target","value","useState","setRobots","useEffect","fetch","then","response","json","users","catch","e","console","log","filteredRobots","filter","toLowerCase","includes","length","Searchbox","Error","currentState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,G,MAXF,SAACC,GACV,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,YAAYC,IAAG,+BAA0BH,KAClD,4BAAKF,GACL,2BAAIC,MCUDK,EAfE,SAACP,GACd,IAAQQ,EAAWR,EAAXQ,OACR,OACI,6BAEQA,EAAOC,KAAI,SAACC,GACR,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAMP,GAAIF,KAAI,UAAKS,EAAMT,MAAQC,MAAK,UAAKQ,EAAMR,OAASC,GAAE,UAAKO,EAAMP,WCA3FS,EATG,SAACZ,GACf,IAAQa,EAAiBb,EAAjBa,aACR,OACI,yBAAKT,UAAU,OACX,2BAAOU,SAAUD,EAAcT,UAAU,gCAAgCW,KAAK,SAASC,YAAY,uB,qCCmBhGC,E,kDAtBX,WAAajB,GAAQ,IAAD,8BAChB,cAAMA,IACDkB,MAAQ,CACTC,UAAU,GAHE,E,qDAOpB,WACIC,KAAKC,SAAS,CAACF,UAAU,M,oBAG7B,WACI,OAAIC,KAAKF,MAAMC,SACJ,0DAIPC,KAAKpB,MAAMsB,a,GAlBKC,aCSbC,EATA,SAACxB,GACZ,OACI,yBAAKyB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChE5B,EAAMsB,W,MCkEJO,mBA9DS,SAACX,GACrB,MAAO,CAIHY,YAAaZ,EAAMY,gBAIA,SAACC,GACxB,MAAO,CAIHC,eAAgB,SAACC,GACbF,ECrBD,CACHhB,KCJwB,mBDKxBmB,QDmB4BD,EAAME,OAAOC,YA+ClCP,EA1Cf,SAAc7B,GAEV,MAA4BqC,mBAAS,IAArC,mBAAO7B,EAAP,KAAe8B,EAAf,KACQR,EAAgC9B,EAAhC8B,YAAaE,EAAmBhC,EAAnBgC,eAKrBO,qBAAW,WACPC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAUN,EAAUM,MACzBC,OAAM,SAAAC,GAAC,OAAGC,QAAQC,IAAI,+BACxB,IAKH,IAAMC,EAAiBzC,EAAO0C,QAAO,SAAAxC,GACjC,OAAOA,EAAMT,KAAKkD,cAAcC,SAAStB,EAAYqB,kBAMzD,OAAK3C,EAAO6C,OAKR,yBAAKjD,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAACkD,EAAD,CAAWzC,aAAcmB,IACzB,kBAAC,EAAD,KACI,kBAACuB,EAAD,KACI,kBAAC,EAAD,CAAU/C,OAAQyC,OATvB,8C,uBGlDTO,EAAe,CACjB1B,YAAa,ICMF2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCERO,EAAQC,aFAc,WAAoC,IAAnChD,EAAkC,uDAA5BsC,EAAcW,EAAc,uDAAP,GACpD,OAAQA,EAAOpD,MACX,IDXwB,mBCYpB,OAAO,2BAAIG,GAAX,IAAkBY,YAAaqC,EAAOjC,UAE1C,QACI,OAAOhB,MEJnBkD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.6c7c5c95.chunk.js","sourcesContent":["import React from 'react'\nimport 'tachyons'\n\nconst Card = (props) => {\n    const { name, email, id } = props;\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='Alien pic' src={`https://robohash.org/${id}`}/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = (props) => {\n    const { robots } = props;\n    return (\n        <div>\n            {\n                robots.map((robot)=> {\n                    return (\n                        <Card key={robot.id} name={`${robot.name}`} email={`${robot.email}`} id={`${robot.id}`}/>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = (props) => {\n    const { searchChange } = props;\n    return (\n        <div className='pa2'>\n            <input onChange={searchChange} className='pa3 b--green bg-lightest-blue' type='search' placeholder='Search for robot' />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React, {Component} from 'react'\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>OOps! Something went wrong</h1>\n        }\n\n        return (\n            this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundary;\n\n","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport default Scroll;","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport Searchbox from '../components/Searchbox'\nimport { connect } from 'react-redux'\nimport ErrorBoundary from '../components/Error';\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport { setSearchField } from '../actions'\n\nconst mapStateToProps = (state) => {\n    return {\n        /**\n         * Return new state from the reducer function\n         */\n        searchField: state.searchField\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        /**\n         * Dispatch action/event which triggers state manipulation\n         */\n        onSearchChange: (event) => {\n            dispatch(setSearchField(event.target.value))\n        }\n    }\n}\n\nfunction App (props) {\n\n    const [robots, setRobots] = useState([])\n    const { searchField, onSearchChange } = props\n\n    /**\n     * If component was mounted (inserted into the render tree) successfully, fetch users\n     */\n    useEffect( ()=> {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => {setRobots(users)})\n        .catch(e=> console.log('Unable to fetch robots'))\n    }, []) // Fetch users only once the component is mounted\n\n    /**\n     * Filter robots\n     */\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    /**\n     * Render a loading h1 tag while the robots are being fetched\n     */\n    if (!robots.length) {\n        return <h1>Loading....</h1>\n    }\n    \n    return (\n        <div className='tc'>\n            <h1 className='f1'>Robofriends</h1>\n            <Searchbox searchChange={onSearchChange}/>\n            <Scroll>\n                <ErrorBoundary>\n                    <CardList robots={filteredRobots}/>\n                </ErrorBoundary>\n            </Scroll>\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SET_SEARCH_FIELD } from './constants'\n\nexport const setSearchField = (text) => {\n    return {\n        type: SET_SEARCH_FIELD,\n        payload: text\n    }\n}\n","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD'","import { SET_SEARCH_FIELD } from './constants'\n\n/**\n * Current state\n */\nconst currentState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=currentState, action={}) => {\n    switch (action.type) {\n        case SET_SEARCH_FIELD:\n            return {...state, searchField: action.payload}\n    \n        default:\n            return state;\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../src/containers/App'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { searchRobots } from './reducers'\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(searchRobots)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}